package sistema_restaurante.sistema.controle;

import sistema_restaurante.sistema.configuracao.Entrada;
import sistema_restaurante.sistema.configuracao.Visual;
import sistema_restaurante.sistema.modelo.Mesa;
import sistema_restaurante.sistema.modelo.Pedido;
import sistema_restaurante.sistema.modelo.Pessoa;
import sistema_restaurante.sistema.persistencia.BaseDados;
import sistema_restaurante.sistema.persistencia.Lista;
import sistema_restaurante.sistema.tipo.EStatusPedido;
import sistema_restaurante.sistema.visual.VisualPedido;

public class ControlePedido {
	// ATRIBUTOS
	private VisualPedido visual;
	private Lista<Pedido> base;
	private Pedido pedido;
	
	
	
	// CONSTRUTOR
	public ControlePedido() {
		visual = new VisualPedido();
		base = BaseDados.getInstance().getBasePedido();
	}
	
	
	
	// METODOS FUNCIONAIS
	public void menuPrincipal() {
		boolean ehSair = false;
		
		while (!ehSair) {
			visual.menuPrincipal();
			
			String opcao = Entrada.getInstance().retornaDado("ESCOLHA SUA OPCAO: ");
			
			switch (opcao) {
			case "1": {
				novoPedido();
				
				break;
			}
			
			case "2": {
				buscarPedido();
				break;
			}
			
			case "9": {
				ehSair = true;
				break;
			}
			
			case "0": {
				System.exit(1);
			}
			
			default:
				Visual.getInstance().visualizarMensagemOpcaoInvalida();
			}
		}
	}
	
	private void buscarPedido() {
		boolean ehSair = false;
		
		while (!ehSair) {
			visual.menuBuscaPedido();
			
			String opcao = Entrada.getInstance().retornaDado("DIGITE SUA OPCAO: ");
			
			switch (opcao) {
			case "1": {
				menuBuscarPedidoPorCodigo();
				
				break;
			}
			
			case "2": {
				buscarTodosPedidos();
				
				break;
			}
			
			case "9": {
				ehSair = true;
				break;
			}
			case "0": {
				System.exit(1);
			}
			default:
				Visual.getInstance().visualizarMensagemOpcaoInvalida();
			}
		}
	}

	private void menuBuscarPedidoPorCodigo() {
		visual.menuBuscarPedidoPorCodigo();
		
		if (visual.getCampoCodigo() == 0) {
			visual.mensagemPedidoNaoEncontrado();
		} else {
			pedido = buscarPedidoPorCodigo(visual.getCampoCodigo());
			pedidoCadastrado(pedido);
		}
	}



	private Pedido buscarTodosPedidos() {
		visual.inicioListaPedidos();
		
		while (base.hasNext()) {
			Pedido busca = base.next();
			
			visual.setCampoCliente(busca.getCliente());
			visual.setCampoGarcom(busca.getGarcom());
			visual.setCampoCodigo(busca.getCodigo());
			visual.setCamposMesa(busca.getMesa());
			
			visual.mostrarPedidoEmColuna();
		}
		
		String opcao = Entrada.getInstance().retornaDado("DIGITE O CODIGO DO PEDIDO: ");
		Integer op;
		try {
			op = Integer.parseInt(opcao);
		} catch (Exception e) {
			op = 0;
		}
		
		return buscarPedidoPorCodigo(op);
	}

	private Pedido buscarPedidoPorCodigo(Integer codigo) {
		Pedido pedido = new Pedido();
		
		pedido.setCodigo(codigo);
		return base.findItem(pedido);
	}

	private void novoPedido() {
		pedido = new Pedido();
		Pessoa garcom;
		Pessoa cliente;
		Mesa mesa;
		boolean status = true;
		
		boolean ehSair = false;
		
		
		if (base.isEmpty()) {
			pedido.setCodigo(1);
		} else {
			pedido.setCodigo(base.findIndex(base.size() -1).getCodigo() + 1);
		}
		
		while (!ehSair) {
			do {
				visual.inicioPedido(pedido.getCodigo());	
				String opcao = Entrada.getInstance().retornaDado("CANCELAR PEDIDO [S / n]: ");
				
				if (opcao.equals("S") || opcao.equals("s")) {
					ehSair = true;
				} else {
					garcom  = new Pessoa(visual.getCampoCpfGarcom());
					cliente = new Pessoa(visual.getCampoCpfCliente());
					
					mesa    = (new ControleMesa()).buscarMesaPorIndex(Integer.parseInt(visual.getCampoNumeroMesa()));
					garcom  = BaseDados.getInstance().getBaseFuncionario().findItem(garcom);
					cliente = BaseDados.getInstance().getBasePessoa().findItem(cliente);
					
					
					
					if (mesa == null) {
						visual.mensagemMesaNaoEncontrada();
						status = status && false;
					}
					
					if (cliente == null) {
						visual.mensagemPessoaNaoEncontrada("CLIENTE");
						status = status && false;
					}
					
					if (garcom == null) {
						status = status && false;
						visual.mensagemPessoaNaoEncontrada("GARCOM");
					}
					
					if (status) {
						pedido.setCliente(cliente);
						pedido.setGarcom(garcom);
						pedido.setMesa(mesa);
						pedido.setStatus(EStatusPedido.CADASTRANDO);
						
						base.insertBegin(pedido);
						ehSair = true;
						pedidoCadastrado(pedido);
					}
				}
				
			} while (!ehSair);
			
			
		}
	}

	private void pedidoCadastrado(Pedido pedido) {
		boolean ehSair = false;
		
		while (!ehSair) {
			visual.novoCadastrado(pedido.getCodigo());
			String opcao = Entrada.getInstance().retornaDado("DIGITE SUA OPCAO: ");
			
			switch (opcao) {
			case "1": {
				
				break;
			}
			
			case "2": {
				
				break;
			}
			
			case "3": {
				
				break;
			}
			
			case "9": {
				ehSair = true;
				break;
			}
			
			case "0": {
				System.exit(1);
			}
			default:
				Visual.getInstance().visualizarMensagemOpcaoInvalida();
			}
		
		}
	}



	// GETTERS AND SETTERS
	public VisualPedido getVisual() {
		return visual;
	}
	public void setVisual(VisualPedido visual) {
		this.visual = visual;
	}
}
